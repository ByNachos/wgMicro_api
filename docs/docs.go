// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/configs": {
            "get": {
                "description": "Retrieves a list of all currently configured WireGuard peers. Private keys of peers are not included.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "List all peer configurations",
                "responses": {
                    "200": {
                        "description": "A list of peer configurations.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/wgMicro_api_internal_domain.Config"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable (WireGuard timeout).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new peer. The server generates cryptographic keys for the peer.\nThe request body should specify AllowedIPs and optionally PreSharedKey and PersistentKeepalive.\nThe response includes the full peer configuration, including the server-generated PrivateKey, which the client must securely store.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Create new peer with server-generated keys",
                "parameters": [
                    {
                        "description": "Peer settings for creation (keys will be generated by server).",
                        "name": "peerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.CreatePeerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Peer created successfully. The response includes the generated private key.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.Config"
                        }
                    },
                    "400": {
                        "description": "Invalid input if the request body is malformed or contains invalid data.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if peer creation or key generation fails.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable if a WireGuard command times out.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configs/client-file": {
            "post": {
                "description": "Generates a WireGuard .conf file for a client.\nThe request body must contain the client's existing public key (to identify the peer on the server) and the client's corresponding private key.\nThe API uses these keys along with server configuration (server public key, endpoint) and the specific peer's details (AllowedIPs, PSK from server, Keepalive) to construct the .conf file.\nThe provided client private key is inserted directly into the .conf file. The API does not store this client-provided private key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Generate client .conf file (client provides keys)",
                "parameters": [
                    {
                        "description": "Client's public and private keys needed for .conf generation.",
                        "name": "clientKeysRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ClientFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The WireGuard .conf file content as plain text.",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid input if the request body is malformed or required keys are missing.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Peer not found if no peer matches the provided client_public_key.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error if .conf file generation fails for other reasons.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable if a WireGuard command (e.g., during peer data fetch) times out.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configs/delete": {
            "post": {
                "description": "Removes a peer from the WireGuard interface using its public key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Delete a peer configuration",
                "parameters": [
                    {
                        "description": "Public key of the peer to delete.",
                        "name": "deleteRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.DeleteConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Peer deleted successfully (No Content).",
                        "schema": {
                            "type": "null"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., empty public key or malformed JSON).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Peer not found (only if service layer can reliably detect this for delete operations).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable (WireGuard timeout).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configs/get": {
            "post": {
                "description": "Retrieves detailed configuration for a specific peer identified by its public key. The peer's private key is not included.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Get configuration by public key",
                "parameters": [
                    {
                        "description": "Public key to retrieve configuration for.",
                        "name": "getRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.GetConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Peer's configuration.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.Config"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., empty public key or malformed JSON).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Peer not found.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable (WireGuard timeout).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configs/rotate": {
            "post": {
                "description": "Rotates peer's keys. Server generates new keys. Old peer removed, new one created preserving AllowedIPs \u0026 Keepalive. Response includes new PrivateKey (client must store it).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Rotate peer key",
                "parameters": [
                    {
                        "description": "Public key of the peer to rotate.",
                        "name": "rotateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.RotatePeerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New peer configuration including new PrivateKey.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.Config"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., empty public key or malformed JSON).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Peer not found.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (key rotation fails).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable (WireGuard timeout).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/configs/update-allowed-ips": {
            "post": {
                "description": "Replaces the list of allowed IP addresses for an existing peer, identified by its public key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configs"
                ],
                "summary": "Update allowed IPs for a peer",
                "parameters": [
                    {
                        "description": "Public key and new list of allowed IPs for the peer.",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.UpdateAllowedIpsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Allowed IPs updated successfully (No body content in response)."
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing public key or malformed body).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Peer not found.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable (WireGuard timeout).",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Indicates if the application process is running and responsive.\nA 200 OK response means the service is live.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Liveness probe for the service",
                "responses": {
                    "200": {
                        "description": "Service is live.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.HealthResponse"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "description": "Indicates if the application is ready to accept and process new requests.\nThis typically involves checking dependencies like database connections or, in this case, WireGuard utility accessibility.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Readiness probe for the service",
                "responses": {
                    "200": {
                        "description": "Service is ready to handle requests.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ReadinessResponse"
                        }
                    },
                    "503": {
                        "description": "Service is not ready, e.g., WireGuard is inaccessible or command timed out.",
                        "schema": {
                            "$ref": "#/definitions/wgMicro_api_internal_domain.ReadinessResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "wgMicro_api_internal_domain.ClientFileRequest": {
            "type": "object",
            "required": [
                "client_private_key",
                "client_public_key"
            ],
            "properties": {
                "client_private_key": {
                    "description": "Client's private key, base64 encoded",
                    "type": "string"
                },
                "client_public_key": {
                    "description": "Client's public key, base64 encoded",
                    "type": "string"
                }
            }
        },
        "wgMicro_api_internal_domain.Config": {
            "type": "object",
            "properties": {
                "allowedIps": {
                    "description": "AllowedIps is a list of IP networks (CIDR notation) from which this peer is allowed to send traffic\nand to which traffic will be routed through this peer.\nExample: [\"10.0.0.2/32\", \"192.168.2.0/24\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "description": "Endpoint is the remote IP address and port to which this peer connects (if this config represents a client)\nor the public IP and port of this peer (if this config represents a remote peer from server's perspective).\nIf \"(none)\" is shown by 'wg show dump', this will be an empty string.\nomitempty is used as it might not always be set or known.\nExample: \"192.0.2.1:51820\"",
                    "type": "string"
                },
                "latestHandshake": {
                    "description": "LatestHandshake is the timestamp (UNIX seconds) of the most recent handshake with this peer.\nA value of 0 indicates no handshake has occurred.\nomitempty is used as it's state information.",
                    "type": "integer"
                },
                "persistentKeepalive": {
                    "description": "PersistentKeepalive is the interval in seconds for sending keepalive packets to the peer.\n\"off\" from 'wg show dump' is represented as 0.\nomitempty is used as it might not be set.\nExample: 25",
                    "type": "integer"
                },
                "preSharedKey": {
                    "description": "PreSharedKey is an optional pre-shared key for an extra layer of security.\nIf \"(none)\" is shown by 'wg show dump', this will be an empty string.\nomitempty is used as it's optional.\nExample: \"s1t2u3v4...+Y9=\"",
                    "type": "string"
                },
                "privateKey": {
                    "description": "PrivateKey is the client's private key. This is NOT part of 'wg show dump' output\nbut is essential for generating a client .conf file.\nIt's populated by the service when new keys are generated (e.g., during Rotate)\nor expected from the user if they manage keys externally and provide it for config generation.\nomitempty is used so it's not shown in API responses unless explicitly set (e.g. on Rotate response).",
                    "type": "string"
                },
                "publicKey": {
                    "description": "PublicKey is the peer's public key. This is a mandatory field for identifying a peer.\nExample: \"a1b2c3d4...+Z0=\"",
                    "type": "string"
                },
                "receiveBytes": {
                    "description": "ReceiveBytes is the total number of bytes received from this peer.\nomitempty is used as it's state information.",
                    "type": "integer"
                },
                "transmitBytes": {
                    "description": "TransmitBytes is the total number of bytes transmitted to this peer.\nomitempty is used as it's state information.",
                    "type": "integer"
                }
            }
        },
        "wgMicro_api_internal_domain.CreatePeerRequest": {
            "type": "object",
            "properties": {
                "allowed_ips": {
                    "description": "AllowedIps is a list of IP networks (CIDR notation) for the new peer. Can be empty.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "persistent_keepalive": {
                    "description": "PersistentKeepalive is an optional interval in seconds for keepalive packets.",
                    "type": "integer"
                },
                "preshared_key": {
                    "description": "PreSharedKey is an optional pre-shared key for the new peer.",
                    "type": "string"
                }
            }
        },
        "wgMicro_api_internal_domain.DeleteConfigRequest": {
            "type": "object",
            "required": [
                "public_key"
            ],
            "properties": {
                "public_key": {
                    "description": "PublicKey is the peer's public key to delete.",
                    "type": "string"
                }
            }
        },
        "wgMicro_api_internal_domain.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains a human-readable message describing the error.\nThis message is intended for the API consumer.\nExample: \"Peer not found\" or \"Invalid input: public key is malformed\"",
                    "type": "string",
                    "example": "Peer not found"
                }
            }
        },
        "wgMicro_api_internal_domain.GetConfigRequest": {
            "type": "object",
            "required": [
                "public_key"
            ],
            "properties": {
                "public_key": {
                    "description": "PublicKey is the peer's public key to retrieve configuration for.",
                    "type": "string"
                }
            }
        },
        "wgMicro_api_internal_domain.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Status indicates the health of the service.\nExpected value is \"ok\" for a healthy service.\nExample: \"ok\"",
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "wgMicro_api_internal_domain.ReadinessResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains a message if the service is not ready, explaining the reason.\nThis field is omitted if the status is \"ready\".\nExample: \"wg command failed: wireguard command timed out\"",
                    "type": "string",
                    "example": "wg command failed"
                },
                "status": {
                    "description": "Status indicates the readiness of the service.\nExpected values: \"ready\" or \"not ready\".\nExample: \"ready\"",
                    "type": "string",
                    "example": "ready"
                }
            }
        },
        "wgMicro_api_internal_domain.RotatePeerRequest": {
            "type": "object",
            "required": [
                "public_key"
            ],
            "properties": {
                "public_key": {
                    "description": "PublicKey is the peer's current public key to rotate.",
                    "type": "string"
                }
            }
        },
        "wgMicro_api_internal_domain.UpdateAllowedIpsRequest": {
            "type": "object",
            "required": [
                "public_key"
            ],
            "properties": {
                "allowed_ips": {
                    "description": "AllowedIps is the new list of IP networks (CIDR notation) to set for the peer.\nThis will replace the existing list. An empty list might remove all allowed IPs.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "public_key": {
                    "description": "PublicKey is the peer's public key to update.",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "WireGuard API Service",
	Description:      "Manages WireGuard peer configurations via an HTTP API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
